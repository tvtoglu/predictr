{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"predictr - Predict the Reliability predictr: predict + reliability, in other words: A tool to predict the reliability. The aim of this package is to provide state of the art tools for all kinds of Weibull analyses. predictr already includes many methods (see list below). A guideline on when to use which method will be added soon. Main Features Parameter Estimation Uncensored two-parameter Weibull distribution Type I and type II right-censored two-parameter Weibull distribution Bx-life calculator Maximum Likelihood Estimation (MLE) Median Rank Regression (MRR) Bias-correction methods C4 method (reduced bias adjustment) Hirose and Ross method Non-Parametric Bootstrap correction (mean, median, trimmed mean) Parametric Bootstrap correction (mean, median, trimmed mean) Confidence bounds Beta-Binomial Bounds Monte-Carlo Pivotal Bounds Non-Parametric Bootstrap Bounds Parametric Bootstrap Bounds Fisher Bounds Likelihood Ratio Bounds Plots Weibull Probability Plots with all needed information on them Multiple Weibull plots in one figure Contour plots Important Links PyPi Github Repository Documentation Zenodo","title":"Home"},{"location":"#predictr-predict-the-reliability","text":"predictr: predict + reliability, in other words: A tool to predict the reliability. The aim of this package is to provide state of the art tools for all kinds of Weibull analyses. predictr already includes many methods (see list below). A guideline on when to use which method will be added soon.","title":"predictr - Predict the Reliability"},{"location":"#main-features","text":"","title":"Main Features"},{"location":"#parameter-estimation","text":"Uncensored two-parameter Weibull distribution Type I and type II right-censored two-parameter Weibull distribution Bx-life calculator Maximum Likelihood Estimation (MLE) Median Rank Regression (MRR)","title":"Parameter Estimation"},{"location":"#bias-correction-methods","text":"C4 method (reduced bias adjustment) Hirose and Ross method Non-Parametric Bootstrap correction (mean, median, trimmed mean) Parametric Bootstrap correction (mean, median, trimmed mean)","title":"Bias-correction methods"},{"location":"#confidence-bounds","text":"Beta-Binomial Bounds Monte-Carlo Pivotal Bounds Non-Parametric Bootstrap Bounds Parametric Bootstrap Bounds Fisher Bounds Likelihood Ratio Bounds","title":"Confidence bounds"},{"location":"#plots","text":"Weibull Probability Plots with all needed information on them Multiple Weibull plots in one figure Contour plots","title":"Plots"},{"location":"#important-links","text":"PyPi Github Repository Documentation Zenodo","title":"Important Links"},{"location":"CHANGELOG/","text":"Change Log - predictr All notable changes to this project will be documented in this file. Planned updates Added .summary() method Weibull AFT [0.1.30] - 2025-05-22 Added Added new arguments for PlotAll.contour_plot(): x_label=r'$\\widehat\\beta$', y_label=r'$\\widehat\\eta$', plot_title='Contour Plot', xy_fontsize=12, plot_title_fontsize=12, legend_fontsize=9, fig_size=(6.4, 4.8). You can now fully customize this plot. Fixed Showing the legend in PlotAll.contour_plot() now works again. [0.1.29] - 2025-05-21 Added Added two new styles to the contour plot in PlotAll.contour_plot(): 'spline' and 'angular_line. These are additional styles to the scatter plot. New default is 'spline' for smoother curves through the data points. [0.1.28] - 2025-03-08 Fixed '1sl' attribute inside the plot is now being displayed correctly. Bug was found by bobbolous! Thank you. [0.1.27] - 2023-03-01 Fixed MRR based NPBB are now computed correctly. A typo in the code lead to a bug that computed solely MLE based bounds, no matter if 'mrr' was set as an attribute. A big THANK YOU to William Gandler who reported this bug and various spelling mistakes! Minor other spelling mistakes pointed out by Antonia, Sarahi and Edna. \u00a1Viva M\u00e9xico, Cabrones! [0.1.26] - 2022-03-28 Added added new style argument plot in PlotAll.contour_plot(style='...'): Currently scatter and angular line plots are supported Fixed Boosted LRB computation by fully vectorizing each computation step and using algeabric tricks (as a tip: don't use np.power(), because it is way too slow for big computations). Now, it takes half the amount of time to have more precise results. [0.1.25] - 2022-02-15 Added added show argument in PlotAll.contour_plot() added customizable x-axis limits in PlotAll.mult_weibull: x_bounds=[start, end] [0.1.24] - 2022-01-15 Added In previous versions of predictr, saving Weibull plots required to plot and show them. Now, saving plots and actually showing them are independent from each other and can be called separately. [0.1.23] - 2022-01-02 Fixed Computation of one-sided Likelihood Ratio Bounds had an error, which always resulted in a 95% one-sided bound; no matter what was set by the user. Added Legend fontsize can now be set in mult_weibull(legend_fontsize=9) Bootstrap bounds now fully support censored data Non-parametric boostrap bias-correction now fully supports censored data (parametric already did) [0.1.22] - 2021-11-02 Fixed Units in axis labels are now according to the International System of Units (SI):e.g. '[%]' -> 'in %' [0.1.21] - 2021-08-23 Fixed Custom plot title was not updating in PlotAll MRR plots: pvalue was not shown when adj. ranks were being used RBA now works correctly in PlotAll Added Linestyles can now be customized in PlotAll -> mult_weibull(linestyle=['-', '-.']) etc. [0.1.20] - 2021-04-15 Fixed Fixed bug that prevented custom axis labels and titles in mult_weibull() [0.1.19] - 2021-03-23 Changed Removed set_cmaps argument in PlotAll. You can now customize the colors for each PlotAll method individually using the color argument. Improved consistency of method arguments throughout code: fontsizes, nomenclature etc. Added PlotAll methods can plot median rank markers Possibility to save plots for all methods Fixed Fixed bug that resulted in empty saved plots [0.1.18] - 2021-03-17 Fixed fig_size didn't work in mult_weibull() due to a bug in the code [0.1.17] - 2021-03-13 Added Better documentation in the code Change Minor changes to have more consistent nomenclature in the code [0.1.16] - 2021-03-03 Fixed fixed last bug in the median rank computation. Bug occured when multiple failure times were identical Added PlotAll().simple_weibull(): Plots Weibull probability plot according to input (Weibull parameters) without calculations PlotAll().weibull_pdf: Plots one or more Weibull probability density functions with fully customizable figure attributes (color, labels, width, height, fontsize etc.) Added ability to customize axis labels, title, fontsize etc for Analysis() and PlotAll Added ability to hide legend in Weibull plot [0.1.15] - 2021-02-27 Fixed fixed wrong percentile values for adjusted ranks when suspenions have lower time to failure values than actual failures permanent fix for the disappearing Weibull probability line (see changelog for version 0.1.14) Added raise ValueError when np_bs and p_bs bias-correction methods are applied to data that has suspensions [0.1.14] - 2021-02-16 Fixed temporary fix for instances in Analysis where the Weibull probability line disappears when two-sided bounds are used [0.1.13] - 2021-01-23 Fixed hrbu was misspelled in the code and raised an error when calling this bias-correction method [0.1.12] - 2021-01-14 Added contour_plot() method in PlotAll class: Plots likelihood ratio contours for Analysis class instances [0.1.11] - 2021-01-01 Fixed When using npbb and pbb as bounds, bounds types 1sl and 1su would return the same bounds limits. Fixed the percentile method. [0.1.10] - 2021-01-01 Fixed Minor fix and code restructuring [0.1.9] - 2021-01-01 Added new GithubPage: https://tvtoglu.github.io/predictr/ new Class: PlotAll -> plot multiple Weibull plots in one figure [0.1.7] - 2020-12-29 Changed changed get_bx_percentile() to a classmethod [0.1.6] - 2020-12-29 Added Official changelog New static method get_bx_percentile() for Analysis class. You can now get the time values for given BX-lives Changed Argument \"bounds\" for Fisher bounds: 'fisher' -> 'fb'. This is more in line with the other confidence bounds","title":"Changelog"},{"location":"CHANGELOG/#change-log-predictr","text":"All notable changes to this project will be documented in this file.","title":"Change Log - predictr"},{"location":"CHANGELOG/#planned-updates","text":"","title":"Planned updates"},{"location":"CHANGELOG/#added","text":".summary() method Weibull AFT","title":"Added"},{"location":"CHANGELOG/#0130-2025-05-22","text":"","title":"[0.1.30] - 2025-05-22"},{"location":"CHANGELOG/#added_1","text":"Added new arguments for PlotAll.contour_plot(): x_label=r'$\\widehat\\beta$', y_label=r'$\\widehat\\eta$', plot_title='Contour Plot', xy_fontsize=12, plot_title_fontsize=12, legend_fontsize=9, fig_size=(6.4, 4.8). You can now fully customize this plot.","title":"Added"},{"location":"CHANGELOG/#fixed","text":"Showing the legend in PlotAll.contour_plot() now works again.","title":"Fixed"},{"location":"CHANGELOG/#0129-2025-05-21","text":"","title":"[0.1.29] - 2025-05-21"},{"location":"CHANGELOG/#added_2","text":"Added two new styles to the contour plot in PlotAll.contour_plot(): 'spline' and 'angular_line. These are additional styles to the scatter plot. New default is 'spline' for smoother curves through the data points.","title":"Added"},{"location":"CHANGELOG/#0128-2025-03-08","text":"","title":"[0.1.28] - 2025-03-08"},{"location":"CHANGELOG/#fixed_1","text":"'1sl' attribute inside the plot is now being displayed correctly. Bug was found by bobbolous! Thank you.","title":"Fixed"},{"location":"CHANGELOG/#0127-2023-03-01","text":"","title":"[0.1.27] - 2023-03-01"},{"location":"CHANGELOG/#fixed_2","text":"MRR based NPBB are now computed correctly. A typo in the code lead to a bug that computed solely MLE based bounds, no matter if 'mrr' was set as an attribute. A big THANK YOU to William Gandler who reported this bug and various spelling mistakes! Minor other spelling mistakes pointed out by Antonia, Sarahi and Edna. \u00a1Viva M\u00e9xico, Cabrones!","title":"Fixed"},{"location":"CHANGELOG/#0126-2022-03-28","text":"","title":"[0.1.26] - 2022-03-28"},{"location":"CHANGELOG/#added_3","text":"added new style argument plot in PlotAll.contour_plot(style='...'): Currently scatter and angular line plots are supported","title":"Added"},{"location":"CHANGELOG/#fixed_3","text":"Boosted LRB computation by fully vectorizing each computation step and using algeabric tricks (as a tip: don't use np.power(), because it is way too slow for big computations). Now, it takes half the amount of time to have more precise results.","title":"Fixed"},{"location":"CHANGELOG/#0125-2022-02-15","text":"","title":"[0.1.25] - 2022-02-15"},{"location":"CHANGELOG/#added_4","text":"added show argument in PlotAll.contour_plot() added customizable x-axis limits in PlotAll.mult_weibull: x_bounds=[start, end]","title":"Added"},{"location":"CHANGELOG/#0124-2022-01-15","text":"","title":"[0.1.24] - 2022-01-15"},{"location":"CHANGELOG/#added_5","text":"In previous versions of predictr, saving Weibull plots required to plot and show them. Now, saving plots and actually showing them are independent from each other and can be called separately.","title":"Added"},{"location":"CHANGELOG/#0123-2022-01-02","text":"","title":"[0.1.23] - 2022-01-02"},{"location":"CHANGELOG/#fixed_4","text":"Computation of one-sided Likelihood Ratio Bounds had an error, which always resulted in a 95% one-sided bound; no matter what was set by the user.","title":"Fixed"},{"location":"CHANGELOG/#added_6","text":"Legend fontsize can now be set in mult_weibull(legend_fontsize=9) Bootstrap bounds now fully support censored data Non-parametric boostrap bias-correction now fully supports censored data (parametric already did)","title":"Added"},{"location":"CHANGELOG/#0122-2021-11-02","text":"","title":"[0.1.22] - 2021-11-02"},{"location":"CHANGELOG/#fixed_5","text":"Units in axis labels are now according to the International System of Units (SI):e.g. '[%]' -> 'in %'","title":"Fixed"},{"location":"CHANGELOG/#0121-2021-08-23","text":"","title":"[0.1.21] - 2021-08-23"},{"location":"CHANGELOG/#fixed_6","text":"Custom plot title was not updating in PlotAll MRR plots: pvalue was not shown when adj. ranks were being used RBA now works correctly in PlotAll","title":"Fixed"},{"location":"CHANGELOG/#added_7","text":"Linestyles can now be customized in PlotAll -> mult_weibull(linestyle=['-', '-.']) etc.","title":"Added"},{"location":"CHANGELOG/#0120-2021-04-15","text":"","title":"[0.1.20] - 2021-04-15"},{"location":"CHANGELOG/#fixed_7","text":"Fixed bug that prevented custom axis labels and titles in mult_weibull()","title":"Fixed"},{"location":"CHANGELOG/#0119-2021-03-23","text":"","title":"[0.1.19] - 2021-03-23"},{"location":"CHANGELOG/#changed","text":"Removed set_cmaps argument in PlotAll. You can now customize the colors for each PlotAll method individually using the color argument. Improved consistency of method arguments throughout code: fontsizes, nomenclature etc.","title":"Changed"},{"location":"CHANGELOG/#added_8","text":"PlotAll methods can plot median rank markers Possibility to save plots for all methods","title":"Added"},{"location":"CHANGELOG/#fixed_8","text":"Fixed bug that resulted in empty saved plots","title":"Fixed"},{"location":"CHANGELOG/#0118-2021-03-17","text":"","title":"[0.1.18] - 2021-03-17"},{"location":"CHANGELOG/#fixed_9","text":"fig_size didn't work in mult_weibull() due to a bug in the code","title":"Fixed"},{"location":"CHANGELOG/#0117-2021-03-13","text":"","title":"[0.1.17] - 2021-03-13"},{"location":"CHANGELOG/#added_9","text":"Better documentation in the code","title":"Added"},{"location":"CHANGELOG/#change","text":"Minor changes to have more consistent nomenclature in the code","title":"Change"},{"location":"CHANGELOG/#0116-2021-03-03","text":"","title":"[0.1.16] - 2021-03-03"},{"location":"CHANGELOG/#fixed_10","text":"fixed last bug in the median rank computation. Bug occured when multiple failure times were identical","title":"Fixed"},{"location":"CHANGELOG/#added_10","text":"PlotAll().simple_weibull(): Plots Weibull probability plot according to input (Weibull parameters) without calculations PlotAll().weibull_pdf: Plots one or more Weibull probability density functions with fully customizable figure attributes (color, labels, width, height, fontsize etc.) Added ability to customize axis labels, title, fontsize etc for Analysis() and PlotAll Added ability to hide legend in Weibull plot","title":"Added"},{"location":"CHANGELOG/#0115-2021-02-27","text":"","title":"[0.1.15] - 2021-02-27"},{"location":"CHANGELOG/#fixed_11","text":"fixed wrong percentile values for adjusted ranks when suspenions have lower time to failure values than actual failures permanent fix for the disappearing Weibull probability line (see changelog for version 0.1.14)","title":"Fixed"},{"location":"CHANGELOG/#added_11","text":"raise ValueError when np_bs and p_bs bias-correction methods are applied to data that has suspensions","title":"Added"},{"location":"CHANGELOG/#0114-2021-02-16","text":"","title":"[0.1.14] - 2021-02-16"},{"location":"CHANGELOG/#fixed_12","text":"temporary fix for instances in Analysis where the Weibull probability line disappears when two-sided bounds are used","title":"Fixed"},{"location":"CHANGELOG/#0113-2021-01-23","text":"","title":"[0.1.13] - 2021-01-23"},{"location":"CHANGELOG/#fixed_13","text":"hrbu was misspelled in the code and raised an error when calling this bias-correction method","title":"Fixed"},{"location":"CHANGELOG/#0112-2021-01-14","text":"","title":"[0.1.12] - 2021-01-14"},{"location":"CHANGELOG/#added_12","text":"contour_plot() method in PlotAll class: Plots likelihood ratio contours for Analysis class instances","title":"Added"},{"location":"CHANGELOG/#0111-2021-01-01","text":"","title":"[0.1.11] - 2021-01-01"},{"location":"CHANGELOG/#fixed_14","text":"When using npbb and pbb as bounds, bounds types 1sl and 1su would return the same bounds limits. Fixed the percentile method.","title":"Fixed"},{"location":"CHANGELOG/#0110-2021-01-01","text":"","title":"[0.1.10] - 2021-01-01"},{"location":"CHANGELOG/#fixed_15","text":"Minor fix and code restructuring","title":"Fixed"},{"location":"CHANGELOG/#019-2021-01-01","text":"","title":"[0.1.9] - 2021-01-01"},{"location":"CHANGELOG/#added_13","text":"new GithubPage: https://tvtoglu.github.io/predictr/ new Class: PlotAll -> plot multiple Weibull plots in one figure","title":"Added"},{"location":"CHANGELOG/#017-2020-12-29","text":"","title":"[0.1.7] - 2020-12-29"},{"location":"CHANGELOG/#changed_1","text":"changed get_bx_percentile() to a classmethod","title":"Changed"},{"location":"CHANGELOG/#016-2020-12-29","text":"","title":"[0.1.6] - 2020-12-29"},{"location":"CHANGELOG/#added_14","text":"Official changelog New static method get_bx_percentile() for Analysis class. You can now get the time values for given BX-lives","title":"Added"},{"location":"CHANGELOG/#changed_2","text":"Argument \"bounds\" for Fisher bounds: 'fisher' -> 'fb'. This is more in line with the other confidence bounds","title":"Changed"},{"location":"citation/","text":"You can cite predictr in your publication or research work using the Digital Object Identifier (DOI): 10.5281/zenodo.4614034 BibTeX @software{tvtoglu_2021_4614034, author = {tvtoglu}, title = {tvtoglu/predictr: V0.1.18}, month = mar, year = 2021, publisher = {Zenodo}, version = {V0.1.18}, doi = {10.5281/zenodo.4614034}, url = {https://doi.org/10.5281/zenodo.4614034} } Let me know when you use predictr for your research. I would be happy to list your publication below.","title":"Cite predictr"},{"location":"citation/#bibtex","text":"@software{tvtoglu_2021_4614034, author = {tvtoglu}, title = {tvtoglu/predictr: V0.1.18}, month = mar, year = 2021, publisher = {Zenodo}, version = {V0.1.18}, doi = {10.5281/zenodo.4614034}, url = {https://doi.org/10.5281/zenodo.4614034} } Let me know when you use predictr for your research. I would be happy to list your publication below.","title":"BibTeX"},{"location":"classes/","text":"Available classes Currently, there are two classes (Analysis and PlotAll) available in the predictr package. I will continue to add new classes in near future. Analysis Analysis contains all necessary methods for the Weibull analysis. Default arguments and values This table provides information on alle arguments that are passed to the Analysis class. Parameter default value type description df None list of floats List of failures ds None list of floats List of suspensions (right-censored only) bounds None str Confidence bounce method to be used in mle() or mrr() bounds_type None str Setting for the bounds: either two-sided or one-sided show False bool If True, the Weibull probability plot will be plotted bcm None str Defines the bias-correction method in mle() cl 0.9 float Sets the confidence level when bounds are used bs_size 5000 int Number of bootstrap samples est_type 'median' str Sets the statistic to compute from the bootstrap samples plot_style 'ggplot' str Choose a style according to your needs. See matplotlib style references for more available styles. unit '-' str Unit of failures and suspensions, e.g. 's', 'ms', 'no. of cycle' etc. x_label 'Time to Failure' string Label for the x-axis y_label 'Unreliability' string Label for the y-axis xy_fontsize 12 float fontsize for the axes label and ticks legend_fontsize 9 float Fontsize for the legend plot_title 'Weibull Probability Plot' string Title for the plot plot_title_fontsize 12 float Fontsize of the plot title fig_size (6, 7) tuple of floats Sets figure width and height in inches: (width, height) save False boolean the beta and eta length of lists. plot_ranks True boolean If True, median ranks will be plotted. show_legend True boolean If True, the legend will be plotted kwarg: path string Path defines the directory and format of the figure E.g. r'var/user/.../test.pdf' Important : df = None will raise an error. There has to be at least one failure. Parameter estimation methods One can either use the Maximum Likelihood Estimation or Median Rank Regression. Maximum likelihood estimation (MLE): from predictr import Analysis prototype_a = Analysis(...) # create an instance prototype_a.mle() # use instance methods Median Rank Regression (MRR) from predictr import Analysis prototype_a = Analysis(...) # create an instance prototype_a.mrr() # use instance methods Bias-correction methods Since parameter estimation methods are only asymptotically unbiased (sample sizes -> \"infinity\"), bias-correction methods are useful when you have only a few failures. These methods correct the Weibull shape and scale parameter. The following table provides possible configurations. Bias-corrections for mrr() are not supported, yet. Bias-correction method mle() mrr() argument value config. statistic C4 aka 'reduced bias adjustment' x - 'c4' - - Hirose and Ross method x - 'hrbu' - - Non-parametric Bootstrap correction x - 'np_bs' bs_size 'mean', 'median', 'trimmed_mean' Parametric Bootstrap correction x - 'p_bs' bs_size 'mean', 'median', 'trimmed_mean' Confidence bounds methods Analysis supports nearly all state of the art confidence bounds methods. confidence bounds mle() mrr() uncensored data censored data bounds_type argument value Beta-Binomial Bounds - x x x '2s', '1sl', '1su' 'bbb' Monte-Carlo Pivotal Bounds - x x x '2s', '1sl', '1su' 'mcpb' Non-Parametric Bootstrap Bounds x x x x '2s', '1sl', '1su' 'npbb' Parametric Bootstrap Bounds x x x x '2s', '1sl', '1su' 'pbb' Fisher Bounds x - x x '2s', '1sl', '1su' 'fb' Likelihood Ratio Bounds x - x x '2s', '1sl', '1su' 'lrb' Important : mle() and mrr() support only specific confidence bounds methods. For instance, you can't use Beta-Binomial Bounds with mle(). This will also raise an error. Use the table above to check, whether a combination of parameter estimation and confidence bounds method is supported. '2s': two-sided confidence bounds, '1su': upper confidence bounds, '1sl': lower confidence bounds. If Beta-Binomial Bounds are used, the lower bound represents the lower percentile bound at a specific time ((pctl) is added in the plot legend). If Fisher Bounds are used, the lower bound represents the lower time bound at a specific percentile. Examples Maximum Likelihood Estimation (MLE) Uncensored sample Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb',show=True) prototype_a.mle() Censored sample Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] suspensions = [1.9, 2.0, 2.0] prototype_a = Analysis(df=failures, ds=suspensions, bounds='lrb',show=True) prototype_a.mle() Median Rank Regression (MRR) Uncensored sample Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='bbb',show=True) prototype_a.mrr() Censored sample Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] suspensions = [1.9, 2.0, 2.0] prototype_a = Analysis(df=failures, ds=suspensions, bounds='mcpb',show=True) prototype_a.mrr() Bias-corrections As already mentioned, only mle() support bias-corrections. The samples in these examples are drawn from a two-parameter Weibull distribution with a shape parameter of 2.0 and a scale parameter of 1.0. Uncensored sample It is appearent that the estimates of beta and eta are now closer to the ground truth values. The dotted grey line in the plot is the \"biased\" MLE line, the bia-corrected line is blue. The legend contains all needed information. failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb', show=True, bcm='c4') prototype_a.mle() The estimates can for the Weibull parameters can be compared directly, since they are available as attributes print(f'biased beta: {prototype_a.beta:4f} --> bias-corrected beta: {prototype_a.beta_c4:4f}') >>> biased beta: 2.511134 --> bias-corrected beta: 2.108248 Censored sample The data is type II right-censored. failures = [0.38760099164906514, 0.5867052007217437, 0.5878056753744406, 0.602290402929083, 0.6754829518358306, 0.7520219855697948] suspensions = [0.7520219855697948, 0.7520219855697948] prototype_a = Analysis(df=failures, ds=suspensions, bounds='lrb', show=True, bcm='hrbu') prototype_a.mle() Modifying the Weibull plot Axes labels and title You can modify the axes label, plot title and the fontsize. Also, you can save the plot by setting save=True and path='your/own/directory/example.pdf'. failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb',show=True, plot_title='New Project', x_label='No. of Cycles', unit='10^3', y_label='Unreliability: 1-R', xy_fontsize=12, save=True, path=r'var/user/test.pdf') prototype_a.mle() Figure size, plot legend and median rank markers You can customize the fontsize that is being used in the plot legend. If you don't want a legend set show_legend=False. By default, the markers for the median ranks will be plotted. Set plot_ranks=False if you don't want median rank markers in your plot. The figure size can be modified with fig_size=(width, height). Width and height set the figure size in inches. failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb',show=True, show_legend=True, legend_fontsize=10, show_ranks=False, fig_size=(7, 7)) prototype_a.mle() PlotAll PlotAll plots class objects from Analysis in one figure. Currently, only data from mle() is supported. Theoretically, you can plot as many objects as you like -> provide a list of colors as a kwarg in PlotAll(objects, **kwargs).mult_weibull(). For now, six colors are supported by default, but you can pass an infinit amount of colors to the mult_weibull() method. Available methods : Methods Description mult_weibull() Plots multiple Analysis class instances in one Weibull plot contour_plot() Plots contour plots when likelihood ratio bounds are used in Analysis weibull_pdf() Plots one or more Weibull probability density functions. Axes are completely customizable. simple_weibull() Plots the Weibull probability plot for a given pair of beta and eta. If failures and/or suspensions are given, the median ranks are plotted as well. Default Arguments of each method Most of the arguments are either self explanatory or already defined in default arguments and values Methods Default arguments mult_weibull() x_label='Time To Failure', y_label='Unreliability', plot_title='Weibull Probability Plot', xy_fontsize=12, plot_title_fontsize=12, fig_size=(6, 7), x_bounds=None, plot_ranks=True, save=False, linestyle=None, legend_fontsize=9, **kwargs contour_plot() show_legend=True, style='spline', x_label=r'$\\widehat\\beta$', y_label=r'$\\widehat\\eta$', plot_title='Contour Plot', xy_fontsize=12, plot_title_fontsize=12, legend_fontsize=9, fig_size=(6.4, 4.8), save=False, **kwargs weibull_pdf() beta=None, eta=None, linestyle=None, labels = None,x_label = None, y_label=None, xy_fontsize=10, legend_fontsize=8, plot_title='Weibull PDF', plot_title_fontsize=12, x_bounds=None, fig_size=None, color=None, save=False, plot_style='ggplot', **kwargs simple_weibull() beta, eta, unit='-', x_label = 'Time to Failure', y_label = 'Unreliability', xy_fontsize=12, plot_title_fontsize=12, plot_title='Weibull Probability Plot', fig_size=(6, 7), show_legend=True, legend_fontsize=9, save=False, df=None, ds=None, **kwargs Parameter(s) default value type description df None list of floats List of failures ds None list of floats List of suspensions (right-censored only) plot_style 'ggplot' str Choose a style according to your needs. See matplotlib style references for more available styles. unit '-' str Unit of failures and suspensions, e.g. 's', 'ms', 'no. of cycle' etc. x_label depends on method string Label for the x-axis y_label depends on method string Label for the y-axis labels string List containing the labels for the plot legend in weibull_pdf() xy_fontsize 12 float fontsize for the axes label and ticks legend_fontsize 9 float Fontsize for the legend plot_title 'Weibull Probability Plot' string Title for the plot plot_title_fontsize 12 float Fontsize of the plot title fig_size (6, 7) tuple of floats Sets figure width and height in inches: (width, height) save False boolean If True, the plot is saved according to the path (kwargs) style 'spline' string Defines the style being used for the contour plot: 'scatter', 'angular_line' plot_ranks True boolean If True, median ranks will be plotted. show_legend True boolean If True, the legend will be plotted weibull_pdf: beta, eta None, None list of floats or None Attributes from Analysis object. Pairs of beta and eta values to be plotted. Each parameter pair must have the same index value. linestyle ['-', '--', ':', '-.'] list of strings Defines the linestyle(s) in the plot. Must be greater or equal to the length of beta ans eta lists color None list of strings List containing the colormap for the plotted lines. Length of list must be equal to the beta and eta length of lists or the number of Analysis objects. x_bounds list of floats Sets x-axis boundaries: [start, stop] or [start, end, steps inbetween], respectively. simple_weibull:beta, eta float Weibull parameter pair which will be plotted kwarg: path string Path defines the directory and format of the figure E.g. r'var/user/.../test.pdf' mult_weibull() Both with two-sided bounds - default colors from predictr import Analysis, PlotAll # Create new objects, e.g. name them prototype_a and prototype_b failures_a = [0.30481336314657737, 0.5793918872111126, 0.633217732127894, 0.7576700925659532, 0.8394342818048925, 0.9118100898948334, 1.0110147142055477, 1.0180126386295232, 1.3201853093496474, 1.492172669340363] prototype_a = Analysis(df=failures_a, bounds='lrb', bounds_type='2s') prototype_a.mle() failures_b = [1.8506941739639076, 2.2685555679846954, 2.380993183650987, 2.642404955035375, 2.777082863078587, 2.89527127055147, 2.9099992138728927, 3.1425481097241, 3.3758727398694406, 3.8274990886889997] prototype_b = Analysis(df=failures_b, bounds='pbb', bounds_type='2s') prototype_b.mle() # Create dictionary with Analysis objects # Keys will be used in figure legend. Name them as you please. objects = {'proto_a': prototype_a, 'proto_b': prototype_b} # Use mult_weibull() method PlotAll(objects).mult_weibull() One object with a one-sided lower bound, the other one has two-sided bounds - default colors You can plot every bounds_type ('2s', '1sl', '1su') and combine them. from predictr import Analysis, PlotAll # Create new objects, e.g. name them prototype_a and prototype_b failures_a = [0.30481336314657737, 0.5793918872111126, 0.633217732127894, 0.7576700925659532, 0.8394342818048925, 0.9118100898948334, 1.0110147142055477, 1.0180126386295232, 1.3201853093496474, 1.492172669340363] prototype_a = Analysis(df=failures_a, bounds='fb', bounds_type='1sl') prototype_a.mle() failures_b = [1.8506941739639076, 2.2685555679846954, 2.380993183650987, 2.642404955035375, 2.777082863078587, 2.89527127055147, 2.9099992138728927, 3.1425481097241, 3.3758727398694406, 3.8274990886889997] prototype_b = Analysis(df=failures_b, bounds='npbb', bounds_type='2s') prototype_b.mle() # Create dictionary with Analysis objects # Keys will be used in figure legend. Name them as you please. objects = {'proto_a': prototype_a, 'proto_b': prototype_b} # Use mult_weibull() method # Set plot_ranks=True, if you want to plot the median rank markers PlotAll(objects).mult_weibull(plot_ranks=False) Three objects - custom colors from predictr import Analysis, PlotAll # Create new objects failures_a = [0.30481336314657737, 0.5793918872111126, 0.633217732127894, 0.7576700925659532, 0.8394342818048925, 0.9118100898948334, 1.0110147142055477, 1.0180126386295232, 1.3201853093496474, 1.492172669340363] prototype_a = Analysis(df=failures_a, bounds='fb', bounds_type='2s') prototype_a.mle() failures_b = [1.8506941739639076, 2.2685555679846954, 2.380993183650987, 2.642404955035375, 2.777082863078587, 2.89527127055147, 2.9099992138728927, 3.1425481097241, 3.3758727398694406, 3.8274990886889997] prototype_b = Analysis(df=failures_b, bounds='npbb', bounds_type='2s') prototype_b.mle() failures_c = [0.04675399107295282, 0.31260891592041457, 0.32121232576015757, 0.6013488316204837, 0.7755159796641791, 0.8994041575114923, 0.956417788622185, 1.1967354178170764, 1.6115311492838604, 2.1120891587523793] prototype_c = Analysis(df=failures_c, bounds='pbb', bounds_type='2s') prototype_c.mle() objects = {'proto_a': prototype_a, 'proto_b': prototype_b, 'secret': prototype_c} # Create list with custom colors and pass to the instance method colors = ['green', 'red', 'blue'] PlotAll(objects).mult_weibull(plot_ranks=False, color=colors) contour_plot() contour_plot() only works for likelihood ratio bounds. Hence, you have to use bounds='lrb' in the Analysis class. This method supports all bounds types and all confidence levels. You can pass as many objects as you want to. Plot a single Analysis object from predictr import Analysis, PlotAll # Create new objects failures_a = [0.30481336314657737, 0.5793918872111126, 0.633217732127894, 0.7576700925659532, 0.8394342818048925, 0.9118100898948334, 1.0110147142055477, 1.0180126386295232, 1.3201853093496474, 1.492172669340363] prototype_a = Analysis(df=failures_a, bounds='lrb', bounds_type='2s') prototype_a.mle() objects = {'initial design': prototype_a} PlotAll(objects).contour_plot() Plot a multiple Analysis objects failures_a = [0.30481336314657737, 0.5793918872111126, 0.633217732127894, 0.7576700925659532, 0.8394342818048925, 0.9118100898948334, 1.0110147142055477, 1.0180126386295232, 1.3201853093496474, 1.492172669340363] prototype_a = Analysis(df=failures_a, bounds='lrb', bounds_type='2s') prototype_a.mle() failures_c = [0.04675399107295282, 0.31260891592041457, 0.32121232576015757, 0.6013488316204837, 0.7755159796641791, 0.8994041575114923, 0.956417788622185, 1.1967354178170764, 1.6115311492838604, 2.1120891587523793] prototype_c = Analysis(df=failures_c, bounds='lrb', bcm = 'hrbu', bounds_type='2s') prototype_c.mle() # Create dictionary with Analysis objects # Keys will be used in figure legend. Name them as you please. objects = {'initial design': prototype_a, 'final design': prototype_c} PlotAll(objects).contour_plot() weibull_pdf() This method plots one or more Weibull probability density functions. Axes are completely customizable. Arguments: weibull_pdf(self, beta=None, eta=None, linestyle=None, labels = None, x_label = None, y_label=None, xy_fontsize=10, legend_fontsize=8, plot_title='Weibull PDF', plot_title_fontsize=12, x_bounds=None, fig_size=None, color=None, save=False, plot_style='ggplot', kwargs) from predictr import Analysis, PlotAll # Use analysis for the parameter estimation failures1 = [3, 3, 3, 3, 3, 3, 4, 4, 9] failures2 = [3, 3, 5, 6, 6, 4, 9] failures3 = [5, 6, 6, 6, 7, 9] a = Analysis(df=failures1, bounds='lrb', bounds_type='2s', show = False, unit= 'min') a.mle() b = Analysis(df=failures1, ds = failures2, bounds='fb', bounds_type='2s', show = False, unit= 'min') b.mle() c = Analysis(df=failures3, bounds='lrb', bcm='hrbu', bounds_type='2s', show = False, unit= 'min') c.mle() # Use weibull_pdf method in PlotAll to plot the Weibull pdfs # beta contains the Weibull shape parameters, which were estimated using Analysis class. Do the same for the Weibull scale parameter eta. # Cusomize the path directory in order to use this code PlotAll().weibull_pdf(beta = [a.beta, b.beta, c.beta], eta = [a.eta, b.eta, c.eta], linestyle=['-', '--', ':'], labels = ['A', 'B', 'C'], x_bounds=[0, 20, 100], plot_title = 'Comparison of three Prototypes', x_label='Time to Failure', y_label='Density Function', save=True, color=['black', 'black', 'black'], path=r'/your/custom/path/test.pdf') simple_weibull() This method plots the Weibull probability plot for a given pair of beta and eta. If failures and/or suspenions are given, the median ranks are plotted as well. from predictr import Analysis, PlotAll # If save=True, you must set the path argument, e.g. path=r'/your/custom/path/test.pdf' PlotAll().simple_weibull(beta =2.0, eta=1, show_legend=True, x_label='Cycles until failure', plot_title='Simple Weibull')","title":"Documentation"},{"location":"classes/#available-classes","text":"Currently, there are two classes (Analysis and PlotAll) available in the predictr package. I will continue to add new classes in near future.","title":"Available classes"},{"location":"classes/#analysis","text":"Analysis contains all necessary methods for the Weibull analysis.","title":"Analysis"},{"location":"classes/#default-arguments-and-values","text":"This table provides information on alle arguments that are passed to the Analysis class. Parameter default value type description df None list of floats List of failures ds None list of floats List of suspensions (right-censored only) bounds None str Confidence bounce method to be used in mle() or mrr() bounds_type None str Setting for the bounds: either two-sided or one-sided show False bool If True, the Weibull probability plot will be plotted bcm None str Defines the bias-correction method in mle() cl 0.9 float Sets the confidence level when bounds are used bs_size 5000 int Number of bootstrap samples est_type 'median' str Sets the statistic to compute from the bootstrap samples plot_style 'ggplot' str Choose a style according to your needs. See matplotlib style references for more available styles. unit '-' str Unit of failures and suspensions, e.g. 's', 'ms', 'no. of cycle' etc. x_label 'Time to Failure' string Label for the x-axis y_label 'Unreliability' string Label for the y-axis xy_fontsize 12 float fontsize for the axes label and ticks legend_fontsize 9 float Fontsize for the legend plot_title 'Weibull Probability Plot' string Title for the plot plot_title_fontsize 12 float Fontsize of the plot title fig_size (6, 7) tuple of floats Sets figure width and height in inches: (width, height) save False boolean the beta and eta length of lists. plot_ranks True boolean If True, median ranks will be plotted. show_legend True boolean If True, the legend will be plotted kwarg: path string Path defines the directory and format of the figure E.g. r'var/user/.../test.pdf' Important : df = None will raise an error. There has to be at least one failure.","title":"Default arguments and values"},{"location":"classes/#parameter-estimation-methods","text":"One can either use the Maximum Likelihood Estimation or Median Rank Regression. Maximum likelihood estimation (MLE): from predictr import Analysis prototype_a = Analysis(...) # create an instance prototype_a.mle() # use instance methods Median Rank Regression (MRR) from predictr import Analysis prototype_a = Analysis(...) # create an instance prototype_a.mrr() # use instance methods","title":"Parameter estimation methods"},{"location":"classes/#bias-correction-methods","text":"Since parameter estimation methods are only asymptotically unbiased (sample sizes -> \"infinity\"), bias-correction methods are useful when you have only a few failures. These methods correct the Weibull shape and scale parameter. The following table provides possible configurations. Bias-corrections for mrr() are not supported, yet. Bias-correction method mle() mrr() argument value config. statistic C4 aka 'reduced bias adjustment' x - 'c4' - - Hirose and Ross method x - 'hrbu' - - Non-parametric Bootstrap correction x - 'np_bs' bs_size 'mean', 'median', 'trimmed_mean' Parametric Bootstrap correction x - 'p_bs' bs_size 'mean', 'median', 'trimmed_mean'","title":"Bias-correction methods"},{"location":"classes/#confidence-bounds-methods","text":"Analysis supports nearly all state of the art confidence bounds methods. confidence bounds mle() mrr() uncensored data censored data bounds_type argument value Beta-Binomial Bounds - x x x '2s', '1sl', '1su' 'bbb' Monte-Carlo Pivotal Bounds - x x x '2s', '1sl', '1su' 'mcpb' Non-Parametric Bootstrap Bounds x x x x '2s', '1sl', '1su' 'npbb' Parametric Bootstrap Bounds x x x x '2s', '1sl', '1su' 'pbb' Fisher Bounds x - x x '2s', '1sl', '1su' 'fb' Likelihood Ratio Bounds x - x x '2s', '1sl', '1su' 'lrb' Important : mle() and mrr() support only specific confidence bounds methods. For instance, you can't use Beta-Binomial Bounds with mle(). This will also raise an error. Use the table above to check, whether a combination of parameter estimation and confidence bounds method is supported. '2s': two-sided confidence bounds, '1su': upper confidence bounds, '1sl': lower confidence bounds. If Beta-Binomial Bounds are used, the lower bound represents the lower percentile bound at a specific time ((pctl) is added in the plot legend). If Fisher Bounds are used, the lower bound represents the lower time bound at a specific percentile.","title":"Confidence bounds methods"},{"location":"classes/#examples","text":"","title":"Examples"},{"location":"classes/#maximum-likelihood-estimation-mle","text":"","title":"Maximum Likelihood Estimation (MLE)"},{"location":"classes/#uncensored-sample","text":"Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb',show=True) prototype_a.mle()","title":"Uncensored sample"},{"location":"classes/#censored-sample","text":"Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] suspensions = [1.9, 2.0, 2.0] prototype_a = Analysis(df=failures, ds=suspensions, bounds='lrb',show=True) prototype_a.mle()","title":"Censored sample"},{"location":"classes/#median-rank-regression-mrr","text":"","title":"Median Rank Regression (MRR)"},{"location":"classes/#uncensored-sample_1","text":"Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='bbb',show=True) prototype_a.mrr()","title":"Uncensored sample"},{"location":"classes/#censored-sample_1","text":"Example: failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] suspensions = [1.9, 2.0, 2.0] prototype_a = Analysis(df=failures, ds=suspensions, bounds='mcpb',show=True) prototype_a.mrr()","title":"Censored sample"},{"location":"classes/#bias-corrections","text":"As already mentioned, only mle() support bias-corrections. The samples in these examples are drawn from a two-parameter Weibull distribution with a shape parameter of 2.0 and a scale parameter of 1.0.","title":"Bias-corrections"},{"location":"classes/#uncensored-sample_2","text":"It is appearent that the estimates of beta and eta are now closer to the ground truth values. The dotted grey line in the plot is the \"biased\" MLE line, the bia-corrected line is blue. The legend contains all needed information. failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb', show=True, bcm='c4') prototype_a.mle() The estimates can for the Weibull parameters can be compared directly, since they are available as attributes print(f'biased beta: {prototype_a.beta:4f} --> bias-corrected beta: {prototype_a.beta_c4:4f}') >>> biased beta: 2.511134 --> bias-corrected beta: 2.108248","title":"Uncensored sample"},{"location":"classes/#censored-sample_2","text":"The data is type II right-censored. failures = [0.38760099164906514, 0.5867052007217437, 0.5878056753744406, 0.602290402929083, 0.6754829518358306, 0.7520219855697948] suspensions = [0.7520219855697948, 0.7520219855697948] prototype_a = Analysis(df=failures, ds=suspensions, bounds='lrb', show=True, bcm='hrbu') prototype_a.mle()","title":"Censored sample"},{"location":"classes/#modifying-the-weibull-plot","text":"","title":"Modifying the Weibull plot"},{"location":"classes/#axes-labels-and-title","text":"You can modify the axes label, plot title and the fontsize. Also, you can save the plot by setting save=True and path='your/own/directory/example.pdf'. failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb',show=True, plot_title='New Project', x_label='No. of Cycles', unit='10^3', y_label='Unreliability: 1-R', xy_fontsize=12, save=True, path=r'var/user/test.pdf') prototype_a.mle()","title":"Axes labels and title"},{"location":"classes/#figure-size-plot-legend-and-median-rank-markers","text":"You can customize the fontsize that is being used in the plot legend. If you don't want a legend set show_legend=False. By default, the markers for the median ranks will be plotted. Set plot_ranks=False if you don't want median rank markers in your plot. The figure size can be modified with fig_size=(width, height). Width and height set the figure size in inches. failures = [0.4508831, 0.68564703, 0.76826143, 0.88231395, 1.48287253, 1.62876357] prototype_a = Analysis(df=failures, bounds='fb',show=True, show_legend=True, legend_fontsize=10, show_ranks=False, fig_size=(7, 7)) prototype_a.mle()","title":"Figure size, plot legend and median rank markers"},{"location":"classes/#plotall","text":"PlotAll plots class objects from Analysis in one figure. Currently, only data from mle() is supported. Theoretically, you can plot as many objects as you like -> provide a list of colors as a kwarg in PlotAll(objects, **kwargs).mult_weibull(). For now, six colors are supported by default, but you can pass an infinit amount of colors to the mult_weibull() method. Available methods : Methods Description mult_weibull() Plots multiple Analysis class instances in one Weibull plot contour_plot() Plots contour plots when likelihood ratio bounds are used in Analysis weibull_pdf() Plots one or more Weibull probability density functions. Axes are completely customizable. simple_weibull() Plots the Weibull probability plot for a given pair of beta and eta. If failures and/or suspensions are given, the median ranks are plotted as well.","title":"PlotAll"},{"location":"classes/#default-arguments-of-each-method","text":"Most of the arguments are either self explanatory or already defined in default arguments and values Methods Default arguments mult_weibull() x_label='Time To Failure', y_label='Unreliability', plot_title='Weibull Probability Plot', xy_fontsize=12, plot_title_fontsize=12, fig_size=(6, 7), x_bounds=None, plot_ranks=True, save=False, linestyle=None, legend_fontsize=9, **kwargs contour_plot() show_legend=True, style='spline', x_label=r'$\\widehat\\beta$', y_label=r'$\\widehat\\eta$', plot_title='Contour Plot', xy_fontsize=12, plot_title_fontsize=12, legend_fontsize=9, fig_size=(6.4, 4.8), save=False, **kwargs weibull_pdf() beta=None, eta=None, linestyle=None, labels = None,x_label = None, y_label=None, xy_fontsize=10, legend_fontsize=8, plot_title='Weibull PDF', plot_title_fontsize=12, x_bounds=None, fig_size=None, color=None, save=False, plot_style='ggplot', **kwargs simple_weibull() beta, eta, unit='-', x_label = 'Time to Failure', y_label = 'Unreliability', xy_fontsize=12, plot_title_fontsize=12, plot_title='Weibull Probability Plot', fig_size=(6, 7), show_legend=True, legend_fontsize=9, save=False, df=None, ds=None, **kwargs Parameter(s) default value type description df None list of floats List of failures ds None list of floats List of suspensions (right-censored only) plot_style 'ggplot' str Choose a style according to your needs. See matplotlib style references for more available styles. unit '-' str Unit of failures and suspensions, e.g. 's', 'ms', 'no. of cycle' etc. x_label depends on method string Label for the x-axis y_label depends on method string Label for the y-axis labels string List containing the labels for the plot legend in weibull_pdf() xy_fontsize 12 float fontsize for the axes label and ticks legend_fontsize 9 float Fontsize for the legend plot_title 'Weibull Probability Plot' string Title for the plot plot_title_fontsize 12 float Fontsize of the plot title fig_size (6, 7) tuple of floats Sets figure width and height in inches: (width, height) save False boolean If True, the plot is saved according to the path (kwargs) style 'spline' string Defines the style being used for the contour plot: 'scatter', 'angular_line' plot_ranks True boolean If True, median ranks will be plotted. show_legend True boolean If True, the legend will be plotted weibull_pdf: beta, eta None, None list of floats or None Attributes from Analysis object. Pairs of beta and eta values to be plotted. Each parameter pair must have the same index value. linestyle ['-', '--', ':', '-.'] list of strings Defines the linestyle(s) in the plot. Must be greater or equal to the length of beta ans eta lists color None list of strings List containing the colormap for the plotted lines. Length of list must be equal to the beta and eta length of lists or the number of Analysis objects. x_bounds list of floats Sets x-axis boundaries: [start, stop] or [start, end, steps inbetween], respectively. simple_weibull:beta, eta float Weibull parameter pair which will be plotted kwarg: path string Path defines the directory and format of the figure E.g. r'var/user/.../test.pdf'","title":"Default Arguments of each method"},{"location":"classes/#mult_weibull","text":"","title":"mult_weibull()"},{"location":"classes/#both-with-two-sided-bounds-default-colors","text":"from predictr import Analysis, PlotAll # Create new objects, e.g. name them prototype_a and prototype_b failures_a = [0.30481336314657737, 0.5793918872111126, 0.633217732127894, 0.7576700925659532, 0.8394342818048925, 0.9118100898948334, 1.0110147142055477, 1.0180126386295232, 1.3201853093496474, 1.492172669340363] prototype_a = Analysis(df=failures_a, bounds='lrb', bounds_type='2s') prototype_a.mle() failures_b = [1.8506941739639076, 2.2685555679846954, 2.380993183650987, 2.642404955035375, 2.777082863078587, 2.89527127055147, 2.9099992138728927, 3.1425481097241, 3.3758727398694406, 3.8274990886889997] prototype_b = Analysis(df=failures_b, bounds='pbb', bounds_type='2s') prototype_b.mle() # Create dictionary with Analysis objects # Keys will be used in figure legend. Name them as you please. objects = {'proto_a': prototype_a, 'proto_b': prototype_b} # Use mult_weibull() method PlotAll(objects).mult_weibull()","title":"Both with two-sided bounds - default colors"},{"location":"classes/#one-object-with-a-one-sided-lower-bound-the-other-one-has-two-sided-bounds-default-colors","text":"You can plot every bounds_type ('2s', '1sl', '1su') and combine them. from predictr import Analysis, PlotAll # Create new objects, e.g. name them prototype_a and prototype_b failures_a = [0.30481336314657737, 0.5793918872111126, 0.633217732127894, 0.7576700925659532, 0.8394342818048925, 0.9118100898948334, 1.0110147142055477, 1.0180126386295232, 1.3201853093496474, 1.492172669340363] prototype_a = Analysis(df=failures_a, bounds='fb', bounds_type='1sl') prototype_a.mle() failures_b = [1.8506941739639076, 2.2685555679846954, 2.380993183650987, 2.642404955035375, 2.777082863078587, 2.89527127055147, 2.9099992138728927, 3.1425481097241, 3.3758727398694406, 3.8274990886889997] prototype_b = Analysis(df=failures_b, bounds='npbb', bounds_type='2s') prototype_b.mle() # Create dictionary with Analysis objects # Keys will be used in figure legend. Name them as you please. objects = {'proto_a': prototype_a, 'proto_b': prototype_b} # Use mult_weibull() method # Set plot_ranks=True, if you want to plot the median rank markers PlotAll(objects).mult_weibull(plot_ranks=False)","title":"One object with a one-sided lower bound, the other one has two-sided bounds - default colors"},{"location":"classes/#three-objects-custom-colors","text":"from predictr import Analysis, PlotAll # Create new objects failures_a = [0.30481336314657737, 0.5793918872111126, 0.633217732127894, 0.7576700925659532, 0.8394342818048925, 0.9118100898948334, 1.0110147142055477, 1.0180126386295232, 1.3201853093496474, 1.492172669340363] prototype_a = Analysis(df=failures_a, bounds='fb', bounds_type='2s') prototype_a.mle() failures_b = [1.8506941739639076, 2.2685555679846954, 2.380993183650987, 2.642404955035375, 2.777082863078587, 2.89527127055147, 2.9099992138728927, 3.1425481097241, 3.3758727398694406, 3.8274990886889997] prototype_b = Analysis(df=failures_b, bounds='npbb', bounds_type='2s') prototype_b.mle() failures_c = [0.04675399107295282, 0.31260891592041457, 0.32121232576015757, 0.6013488316204837, 0.7755159796641791, 0.8994041575114923, 0.956417788622185, 1.1967354178170764, 1.6115311492838604, 2.1120891587523793] prototype_c = Analysis(df=failures_c, bounds='pbb', bounds_type='2s') prototype_c.mle() objects = {'proto_a': prototype_a, 'proto_b': prototype_b, 'secret': prototype_c} # Create list with custom colors and pass to the instance method colors = ['green', 'red', 'blue'] PlotAll(objects).mult_weibull(plot_ranks=False, color=colors)","title":"Three objects - custom colors"},{"location":"classes/#contour_plot","text":"contour_plot() only works for likelihood ratio bounds. Hence, you have to use bounds='lrb' in the Analysis class. This method supports all bounds types and all confidence levels. You can pass as many objects as you want to.","title":"contour_plot()"},{"location":"classes/#plot-a-single-analysis-object","text":"from predictr import Analysis, PlotAll # Create new objects failures_a = [0.30481336314657737, 0.5793918872111126, 0.633217732127894, 0.7576700925659532, 0.8394342818048925, 0.9118100898948334, 1.0110147142055477, 1.0180126386295232, 1.3201853093496474, 1.492172669340363] prototype_a = Analysis(df=failures_a, bounds='lrb', bounds_type='2s') prototype_a.mle() objects = {'initial design': prototype_a} PlotAll(objects).contour_plot()","title":"Plot a single Analysis object"},{"location":"classes/#plot-a-multiple-analysis-objects","text":"failures_a = [0.30481336314657737, 0.5793918872111126, 0.633217732127894, 0.7576700925659532, 0.8394342818048925, 0.9118100898948334, 1.0110147142055477, 1.0180126386295232, 1.3201853093496474, 1.492172669340363] prototype_a = Analysis(df=failures_a, bounds='lrb', bounds_type='2s') prototype_a.mle() failures_c = [0.04675399107295282, 0.31260891592041457, 0.32121232576015757, 0.6013488316204837, 0.7755159796641791, 0.8994041575114923, 0.956417788622185, 1.1967354178170764, 1.6115311492838604, 2.1120891587523793] prototype_c = Analysis(df=failures_c, bounds='lrb', bcm = 'hrbu', bounds_type='2s') prototype_c.mle() # Create dictionary with Analysis objects # Keys will be used in figure legend. Name them as you please. objects = {'initial design': prototype_a, 'final design': prototype_c} PlotAll(objects).contour_plot()","title":"Plot a multiple Analysis objects"},{"location":"classes/#weibull_pdf","text":"This method plots one or more Weibull probability density functions. Axes are completely customizable. Arguments: weibull_pdf(self, beta=None, eta=None, linestyle=None, labels = None, x_label = None, y_label=None, xy_fontsize=10, legend_fontsize=8, plot_title='Weibull PDF', plot_title_fontsize=12, x_bounds=None, fig_size=None, color=None, save=False, plot_style='ggplot', kwargs) from predictr import Analysis, PlotAll # Use analysis for the parameter estimation failures1 = [3, 3, 3, 3, 3, 3, 4, 4, 9] failures2 = [3, 3, 5, 6, 6, 4, 9] failures3 = [5, 6, 6, 6, 7, 9] a = Analysis(df=failures1, bounds='lrb', bounds_type='2s', show = False, unit= 'min') a.mle() b = Analysis(df=failures1, ds = failures2, bounds='fb', bounds_type='2s', show = False, unit= 'min') b.mle() c = Analysis(df=failures3, bounds='lrb', bcm='hrbu', bounds_type='2s', show = False, unit= 'min') c.mle() # Use weibull_pdf method in PlotAll to plot the Weibull pdfs # beta contains the Weibull shape parameters, which were estimated using Analysis class. Do the same for the Weibull scale parameter eta. # Cusomize the path directory in order to use this code PlotAll().weibull_pdf(beta = [a.beta, b.beta, c.beta], eta = [a.eta, b.eta, c.eta], linestyle=['-', '--', ':'], labels = ['A', 'B', 'C'], x_bounds=[0, 20, 100], plot_title = 'Comparison of three Prototypes', x_label='Time to Failure', y_label='Density Function', save=True, color=['black', 'black', 'black'], path=r'/your/custom/path/test.pdf')","title":"weibull_pdf()"},{"location":"classes/#simple_weibull","text":"This method plots the Weibull probability plot for a given pair of beta and eta. If failures and/or suspenions are given, the median ranks are plotted as well. from predictr import Analysis, PlotAll # If save=True, you must set the path argument, e.g. path=r'/your/custom/path/test.pdf' PlotAll().simple_weibull(beta =2.0, eta=1, show_legend=True, x_label='Cycles until failure', plot_title='Simple Weibull')","title":"simple_weibull()"},{"location":"contact/","text":"Contact me for suggestions and questions E-mail E-mail address: predictr(AT)outlookDOTcom (replace (AT) with @ and DOT with .) Medium Medium Profile Github Discussion Use github discussion for help, suggestions, and questions. Github Discussions","title":"Contact me"},{"location":"contact/#contact-me-for-suggestions-and-questions","text":"","title":"Contact me for suggestions and questions"},{"location":"contact/#e-mail","text":"E-mail address: predictr(AT)outlookDOTcom (replace (AT) with @ and DOT with .)","title":"E-mail"},{"location":"contact/#medium","text":"Medium Profile","title":"Medium"},{"location":"contact/#github-discussion","text":"Use github discussion for help, suggestions, and questions. Github Discussions","title":"Github Discussion"},{"location":"get_started/","text":"Installation and Usage Step 1: Download Anaconda The easiest way to install Python is by downloading Anaconda (https://www.anaconda.com) for free. Anaconda comes with all essential packages and Python. You need Python 3 (>= 3.6) Step 2: Install predictr package Use the package manager pip to install predictr. pip install predictr Step 3: Use predictr in an IDE or text editor Anaconda comes with a bunch of pre-installed packages. Spyder is a very good IDE you can use to get started using Python. Open the Anaconda Navigator and install Spyder if necessary. Open Spyder and create a new file Import predictr in Spyder using: from predictr import Analysis, PlotAll Now you're able to use the Analysis and PlotAll classes from predictr. For now, these are the only classes you can import. However, I will add new classes to predictr in the future.","title":"Getting started"},{"location":"get_started/#installation-and-usage","text":"","title":"Installation and Usage"},{"location":"get_started/#step-1-download-anaconda","text":"The easiest way to install Python is by downloading Anaconda (https://www.anaconda.com) for free. Anaconda comes with all essential packages and Python. You need Python 3 (>= 3.6)","title":"Step 1: Download Anaconda"},{"location":"get_started/#step-2-install-predictr-package","text":"Use the package manager pip to install predictr. pip install predictr","title":"Step 2: Install predictr package"},{"location":"get_started/#step-3-use-predictr-in-an-ide-or-text-editor","text":"Anaconda comes with a bunch of pre-installed packages. Spyder is a very good IDE you can use to get started using Python. Open the Anaconda Navigator and install Spyder if necessary. Open Spyder and create a new file Import predictr in Spyder using: from predictr import Analysis, PlotAll Now you're able to use the Analysis and PlotAll classes from predictr. For now, these are the only classes you can import. However, I will add new classes to predictr in the future.","title":"Step 3: Use predictr in an IDE or text editor"},{"location":"publications/","text":"Overview of my publications Medium (medium.com and towardsdatascience.com) Publisher: Towards Data Science Date: January 19, 2022 Survival Analysis in Python: A Quick Guide to The Weibull Analysis Papers, journals, etc. Conference: Probabilistic Safety Assessment & Management Conference (PSAM16) Date: June 27, 2022 Location: Honululu, O'ahu, Hawaii, USA A Machine Learning Approach to Enhance the Information on Suspensions in Life Data Analysis Conference: 13th Annual Conference of the PHM Society (2021) Date: November 29, 2022 Location: Fully online due to Covid (initially planned: Nashville, Tennessee, USA) Learning an Optimal Operational Strategy for Service Life Extension of Gear Wheels with Double Deep Q Networks Conference: ESREL2020-PSAM15: The 30th European Safety and Reliability Conference & The 15th Probabilistic Safety Assessment and Management Conference Date: November 2-5, 2020 Location: Fully online (initially planned: Venice, Italy) Bias Corrected Weibull Parameter Estimation and Impact on Confidence Bounds Conference: The 9th Asia-Pacific International Symposium on Advanced Reliability and Maintenance Modeling (APARM 2020) Date: August 20, 2020 Location: Fully online (initially planned: Vancouver, British Colombia, Canada) On the Coverage Probability of Bias-Corrected Confidence Bounds Conference: Probabilistic Safety Assessment & Management Conference (PSAM14) Date: September 16-21, 2018 Location: UCLA, Los Angeles, California, USA Quantitative reliability demonstration from production to operation on the example of the new radiation tolerant power converter controller for the Large Hadron Collider","title":"Publications"},{"location":"publications/#overview-of-my-publications","text":"","title":"Overview of my publications"},{"location":"publications/#medium-mediumcom-and-towardsdatasciencecom","text":"Publisher: Towards Data Science Date: January 19, 2022 Survival Analysis in Python: A Quick Guide to The Weibull Analysis","title":"Medium (medium.com and towardsdatascience.com)"},{"location":"publications/#papers-journals-etc","text":"Conference: Probabilistic Safety Assessment & Management Conference (PSAM16) Date: June 27, 2022 Location: Honululu, O'ahu, Hawaii, USA A Machine Learning Approach to Enhance the Information on Suspensions in Life Data Analysis Conference: 13th Annual Conference of the PHM Society (2021) Date: November 29, 2022 Location: Fully online due to Covid (initially planned: Nashville, Tennessee, USA) Learning an Optimal Operational Strategy for Service Life Extension of Gear Wheels with Double Deep Q Networks Conference: ESREL2020-PSAM15: The 30th European Safety and Reliability Conference & The 15th Probabilistic Safety Assessment and Management Conference Date: November 2-5, 2020 Location: Fully online (initially planned: Venice, Italy) Bias Corrected Weibull Parameter Estimation and Impact on Confidence Bounds Conference: The 9th Asia-Pacific International Symposium on Advanced Reliability and Maintenance Modeling (APARM 2020) Date: August 20, 2020 Location: Fully online (initially planned: Vancouver, British Colombia, Canada) On the Coverage Probability of Bias-Corrected Confidence Bounds Conference: Probabilistic Safety Assessment & Management Conference (PSAM14) Date: September 16-21, 2018 Location: UCLA, Los Angeles, California, USA Quantitative reliability demonstration from production to operation on the example of the new radiation tolerant power converter controller for the Large Hadron Collider","title":"Papers, journals, etc."}]}